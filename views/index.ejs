<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IP Monitor</title>
    <style>
        body { 
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f8f9fa;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        h1 {
            color: #333;
            margin: 0;
        }
        .card {
            background-color: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        input, select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        .form-row {
            display: flex;
            gap: 15px;
        }
        .form-row > div {
            flex: 1;
        }
        button {
            padding: 10px 15px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background-color: #0056b3;
        }
        .filter-form {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            align-items: flex-end;
        }
        .filter-form > div {
            flex: 1;
        }
        .filter-form button {
            height: 38px;
        }
        .filter-actions {
            display: flex;
            gap: 10px;
        }
        .btn-secondary {
            background-color: #6c757d;
        }
        .btn-secondary:hover {
            background-color: #5a6268;
        }
        .btn-danger {
            background-color: #dc3545;
        }
        .btn-danger:hover {
            background-color: #c82333;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
            position: sticky;
            top: 0;
        }
        .table-container {
            max-height: 600px;
            overflow-y: auto;
            border-radius: 5px;
            border: 1px solid #ddd;
        }
        .up {
            color: green;
            font-weight: bold;
        }
        .down {
            color: red;
            font-weight: bold;
        }
        .unknown {
            color: orange;
            font-weight: bold;
        }
        .actions {
            display: flex;
            gap: 5px;
        }
        .btn-sm {
            padding: 5px 10px;
            font-size: 0.8em;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 50%;
            border-radius: 5px;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .close:hover {
            color: black;
        }
        .modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 20px;
        }
        .summary-stats {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }
        .stat-card {
            flex: 1;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .stat-card h3 {
            margin: 0;
            font-size: 2em;
        }
        .stat-card p {
            margin: 5px 0 0;
            color: #666;
        }
        .bg-success {
            background-color: #d4edda;
            color: #155724;
        }
        .bg-danger {
            background-color: #f8d7da;
            color: #721c24;
        }
        .bg-warning {
            background-color: #fff3cd;
            color: #856404;
        }
        .bg-info {
            background-color: #d1ecf1;
            color: #0c5460;
        }
        .download-form {
            margin-bottom: 20px;
        }
        .history-table {
            max-height: 300px;
            overflow-y: auto;
        }
        .upload-container {
    margin-top: 20px;
}
.file-upload {
    display: none;
}
.upload-btn-wrapper {
    position: relative;
    overflow: hidden;
    display: inline-block;
}
.btn-file {
    border: 2px solid gray;
    color: gray;
    background-color: white;
    padding: 8px 20px;
    border-radius: 4px;
    font-weight: bold;
    cursor: pointer;
}
.upload-btn-wrapper input[type=file] {
    font-size: 100px;
    position: absolute;
    left: 0;
    top: 0;
    opacity: 0;
    cursor: pointer;
}
.file-name {
    margin-left: 10px;
    font-style: italic;
}
.progress-bar {
    width: 100%;
    background-color: #f3f3f3;
    border-radius: 4px;
    margin: 10px 0;
    height: 20px;
    position: relative;
}
.progress {
    height: 100%;
    background-color: #4CAF50;
    border-radius: 4px;
    width: 0%;
    transition: width 0.3s;
}
.csv-manual {
    margin-top: 20px;
    padding: 15px;
    background-color: #f8f9fa;
    border-radius: 4px;
    border-left: 4px solid #007bff;
}
.csv-manual pre {
    background-color: #eee;
    padding: 10px;
    border-radius: 4px;
    overflow-x: auto;
}
.textarea-upload {
    width: 100%;
    height: 150px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-family: monospace;
    resize: vertical;
}
.results-area {
    margin-top: 15px;
    padding: 15px;
    border-radius: 4px;
    display: none;
}
.success-result {
    background-color: #d4edda;
    border: 1px solid #c3e6cb;
    color: #155724;
}
.error-list {
    margin-top: 10px;
    max-height: 200px;
    overflow-y: auto;
    border: 1px solid #f5c6cb;
    border-radius: 4px;
    padding: 10px;
    background-color: #fff;
}
.tab-container {
    display: flex;
    border-bottom: 1px solid #ddd;
    margin-bottom: 20px;
}
.tab {
    padding: 10px 20px;
    cursor: pointer;
    border: 1px solid transparent;
    border-bottom: none;
    border-radius: 4px 4px 0 0;
    margin-right: 5px;
}
.tab.active {
    background-color: white;
    border-color: #ddd;
    border-bottom: 1px solid white;
    margin-bottom: -1px;
    font-weight: bold;
}
.tab-content {
    display: none;
}
.tab-content.active {
    display: block;
}
.full-width {
        width: 100%;
    }
    .alert-success {
        background-color: #d4edda;
        border-color: #c3e6cb;
        color: #155724;
    }
    .alert-danger {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
    }
    #uploadErrorList {
        background-color: #f8f9fa;
        padding: 10px;
        border-radius: 4px;
        border: 1px solid #ddd;
        margin-top: 10px;
    }

    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>IP Monitor</h1>
        </div>
        
        <!-- Summary statistics -->
        <div class="summary-stats">
            <div class="stat-card bg-success">
                <h3 id="upCount">0</h3>
                <p>Up</p>
            </div>
            <div class="stat-card bg-danger">
                <h3 id="downCount">0</h3>
                <p>Down</p>
            </div>
            <div class="stat-card bg-warning">
                <h3 id="unknownCount">0</h3>
                <p>Unknown</p>
            </div>
            <div class="stat-card bg-info">
                <h3 id="totalCount">0</h3>
                <p>Total</p>
            </div>
        </div>
        
        <!-- Add IP Form -->
        <div class="card">
            <h2>Add New IP</h2>
            <form id="ipForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="ipAddress">IP Address</label>
                        <input type="text" id="ipAddress" placeholder="Enter IP Address" required>
                    </div>
                    <div class="form-group">
                        <label for="ipLocation">Location</label>
                        <input type="text" id="ipLocation" placeholder="Enter Location" required>
                    </div>
                </div>
                <button type="submit">Add IP</button>
            </form>
        </div>
        <div class="card">
            <h2>Mass Upload IPs</h2>
            <div class="form-group">
                <p>Upload multiple IP addresses at once using a CSV file.</p>
                <div class="form-row">
                    <div class="form-group" style="flex: 3;">
                        <input type="file" id="csvFile" accept=".csv" class="form-control">
                    </div>
                    <div style="flex: 1;">
                        <button id="uploadBtn" class="full-width">Upload</button>
                    </div>
                </div>
                <div class="form-row" style="margin-top: 10px;">
                    <div class="form-group">
                        <button id="downloadTemplateBtn" class="btn-secondary">Download Template</button>
                    </div>
                </div>
            </div>
            <!-- Upload Result Alert -->
            <div id="uploadResult" style="display: none; margin-top: 15px; padding: 10px; border-radius: 4px;">
                <h4 id="uploadResultTitle" style="margin-top: 0;"></h4>
                <p id="uploadResultMessage"></p>
                <div id="uploadErrorList" style="max-height: 150px; overflow-y: auto;"></div>
            </div>
        </div>
        <!-- Filters -->
        <div class="card">
            <h2>Filters</h2>
            <div class="filter-form">
                <div class="form-group">
                    <label for="statusFilter">Status</label>
                    <select id="statusFilter">
                        <option value="All">All</option>
                        <option value="Up">Up</option>
                        <option value="Down">Down</option>
                        <option value="Unknown">Unknown</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="locationFilter">Location</label>
                    <select id="locationFilter">
                        <option value="All">All</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="searchFilter">Search</label>
                    <input type="text" id="searchFilter" placeholder="Search by IP address">
                </div>
                <div class="filter-actions">
                    <button id="applyFilters">Apply Filters</button>
                    <button id="resetFilters" class="btn-secondary">Reset</button>
                </div>
            </div>
        </div>
        
        <!-- Download options -->
        <div class="card">
            <h2>Download Downtime History</h2>
            <div class="download-form">
                <div class="form-row">
                    <div class="form-group">
                        <label for="ipFilterDownload">IP Address</label>
                        <select id="ipFilterDownload">
                            <option value="All">All</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="startDate">Start Date</label>
                        <input type="date" id="startDate">
                    </div>
                    <div class="form-group">
                        <label for="endDate">End Date</label>
                        <input type="date" id="endDate">
                    </div>
                </div>
                <button id="downloadBtn">Download CSV</button>
            </div>
        </div>
        
        <!-- IP Table -->
        <div class="card">
            <h2>IP Status</h2>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>IP Address</th>
                            <th>Location</th>
                            <th>Status</th>
                            <th>Downtime Count</th>
                            <th>Last Downtime</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="ipTableBody"></tbody>
                </table>
            </div>
        </div>
    </div>
    
    <!-- Downtime History Modal -->
    <div id="historyModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Downtime History: <span id="historyIpAddress"></span></h2>
            <div class="history-table">
                <table>
                    <thead>
                        <tr>
                            <th>Timestamp</th>
                            <th>Duration</th>
                        </tr>
                    </thead>
                    <tbody id="historyTableBody"></tbody>
                </table>
            </div>
        </div>
    </div>
    
    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal">
        <div class="modal-content">
            <h2>Confirm Delete</h2>
            <p>Are you sure you want to delete the IP <span id="deleteIpAddress"></span>?</p>
            <p>This will also remove all downtime history for this IP.</p>
            <div class="modal-actions">
                <button id="confirmDelete" class="btn-danger">Delete</button>
                <button id="cancelDelete" class="btn-secondary">Cancel</button>
            </div>
        </div>
    </div>
    
    <script>
        // Global variables
        let ipData = [];
        let ipAddresses = [];
        let locations = [];
        let deleteIpId = null;
        
        // DOM elements
        const ipTableBody = document.getElementById('ipTableBody');
        const statusFilter = document.getElementById('statusFilter');
        const locationFilter = document.getElementById('locationFilter');
        const searchFilter = document.getElementById('searchFilter');
        const ipFilterDownload = document.getElementById('ipFilterDownload');
        const historyModal = document.getElementById('historyModal');
        const deleteModal = document.getElementById('deleteModal');
        const deleteIpAddressSpan = document.getElementById('deleteIpAddress');
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            fetchIPs();
            fetchLocations();
            
            // Set today's date as the default end date
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('endDate').value = today;
            
            // Set one week ago as the default start date
            const lastWeek = new Date();
            lastWeek.setDate(lastWeek.getDate() - 7);
            document.getElementById('startDate').value = lastWeek.toISOString().split('T')[0];
        });
        
        // Functions to fetch data
        async function fetchIPs() {
            try {
                // Build query string for filters
                const status = statusFilter.value;
                const location = locationFilter.value;
                const search = searchFilter.value;
                
                let url = '/api/ip';
                const params = new URLSearchParams();
                
                if (status !== 'All') {
                    params.append('status', status);
                }
                
                if (location !== 'All') {
                    params.append('location', location);
                }
                
                if (search) {
                    params.append('search', search);
                }
                
                if (params.toString()) {
                    url += '?' + params.toString();
                }
                
                const response = await fetch(url);
                
                if (!response.ok) {
                    throw new Error('Failed to fetch IPs');
                }
                
                ipData = await response.json();
                
                // Update the IP address dropdown for download
                ipAddresses = ['All', ...new Set(ipData.map(ip => ip.address))];
                updateIpAddressDropdown();
                
                // Render the table
                renderIpTable();
                
                // Update summary statistics
                updateSummaryStats();
                
            } catch (error) {
                console.error('Error fetching IPs:', error);
            }
        }
        
        async function fetchLocations() {
            try {
                const response = await fetch('/api/locations');
                
                if (!response.ok) {
                    throw new Error('Failed to fetch locations');
                }
                
                locations = await response.json();
                updateLocationDropdown();
                
            } catch (error) {
                console.error('Error fetching locations:', error);
            }
        }
        
        async function fetchDowntimeHistory(ipAddress) {
            try {
                const response = await fetch(`/api/downtime/${ipAddress}?limit=50`);
                
                if (!response.ok) {
                    throw new Error('Failed to fetch downtime history');
                }
                
                const history = await response.json();
                
                // Update the history modal
                const historyTableBody = document.getElementById('historyTableBody');
                const historyIpAddressSpan = document.getElementById('historyIpAddress');
                
                historyIpAddressSpan.textContent = ipAddress;
                historyTableBody.innerHTML = '';
                
                if (history.length === 0) {
                    const row = document.createElement('tr');
                    row.innerHTML = '<td colspan="2">No downtime history found</td>';
                    historyTableBody.appendChild(row);
                } else {
                    history.forEach(item => {
                        const row = document.createElement('tr');
                        const timestamp = new Date(item.timestamp).toLocaleString();
                        const duration = item.duration ? `${Math.round(item.duration / 1000)} seconds` : 'Ongoing';
                        
                        row.innerHTML = `
                            <td>${timestamp}</td>
                            <td>${duration}</td>
                        `;
                        historyTableBody.appendChild(row);
                    });
                }
                
                // Show the modal
                historyModal.style.display = 'block';
                
            } catch (error) {
                console.error('Error fetching downtime history:', error);
            }
        }
        
        // UI rendering functions
        function renderIpTable() {
            ipTableBody.innerHTML = '';
            
            if (ipData.length === 0) {
                const row = document.createElement('tr');
                row.innerHTML = '<td colspan="6">No IP addresses found</td>';
                ipTableBody.appendChild(row);
                return;
            }
            
            ipData.forEach(ip => {
                const row = document.createElement('tr');
                const lastDowntime = ip.lastDowntime ? new Date(ip.lastDowntime).toLocaleString() : '';
                
                row.innerHTML = `
                    <td>${ip.address}</td>
                    <td>${ip.location || ''}</td>
                    <td class="${ip.status.toLowerCase()}">${ip.status}</td>
                    <td>${ip.downtimeCount || 0}</td>
                    <td>${lastDowntime}</td>
                    <td class="actions">
                        <button class="view-history btn-sm" data-ip="${ip.address}">History</button>
                        <button class="delete-ip btn-sm btn-danger" data-id="${ip._id}" data-ip="${ip.address}">Delete</button>
                    </td>
                `;
                ipTableBody.appendChild(row);
            });
            
            // Add event listeners to the new buttons
            addButtonEventListeners();
        }
        
        function updateSummaryStats() {
            const total = ipData.length;
            const up = ipData.filter(ip => ip.status === 'Up').length;
            const down = ipData.filter(ip => ip.status === 'Down').length;
            const unknown = ipData.filter(ip => ip.status === 'Unknown').length;
            
            document.getElementById('totalCount').textContent = total;
            document.getElementById('upCount').textContent = up;
            document.getElementById('downCount').textContent = down;
            document.getElementById('unknownCount').textContent = unknown;
        }
        
        function updateLocationDropdown() {
            locationFilter.innerHTML = '<option value="All">All</option>';
            
            locations.forEach(location => {
                if (location) {
                    const option = document.createElement('option');
                    option.value = location;
                    option.textContent = location;
                    locationFilter.appendChild(option);
                }
            });
        }
        
        function updateIpAddressDropdown() {
            ipFilterDownload.innerHTML = '<option value="All">All</option>';
            
            ipAddresses.forEach(ip => {
                if (ip !== 'All') {
                    const option = document.createElement('option');
                    option.value = ip;
                    option.textContent = ip;
                    ipFilterDownload.appendChild(option);
                }
            });
        }
        
        function addButtonEventListeners() {
            // View history buttons
            document.querySelectorAll('.view-history').forEach(button => {
                button.addEventListener('click', function() {
                    const ipAddress = this.getAttribute('data-ip');
                    fetchDowntimeHistory(ipAddress);
                });
            });
            
            // Delete IP buttons
            document.querySelectorAll('.delete-ip').forEach(button => {
                button.addEventListener('click', function() {
                    const ipAddress = this.getAttribute('data-ip');
                    deleteIpId = this.getAttribute('data-id');
                    deleteIpAddressSpan.textContent = ipAddress;
                    deleteModal.style.display = 'block';
                });
            });
        }
        
        // Event listeners
        document.getElementById('ipForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const ipAddress = document.getElementById('ipAddress').value;
            const ipLocation = document.getElementById('ipLocation').value;
            
            try {
                const response = await fetch('/api/ip', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ address: ipAddress, location: ipLocation })
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    alert(error.error || 'Failed to add IP');
                    return;
                }
                
                document.getElementById('ipAddress').value = '';
                document.getElementById('ipLocation').value = '';
                
                // Refresh data
                fetchIPs();
                fetchLocations();
                
            } catch (error) {
                console.error('Error adding IP:', error);
                alert('Failed to add IP');
            }
        });
        
        document.getElementById('applyFilters').addEventListener('click', () => {
            fetchIPs();
        });
        
        document.getElementById('resetFilters').addEventListener('click', () => {
            statusFilter.value = 'All';
            locationFilter.value = 'All';
            searchFilter.value = '';
            fetchIPs();
        });
        
        document.getElementById('downloadBtn').addEventListener('click', async () => {
            const ipAddress = ipFilterDownload.value;
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            
            const params = new URLSearchParams();
            
            if (ipAddress !== 'All') {
                params.append('ipAddress', ipAddress);
            }
            
            if (startDate) {
                params.append('startDate', startDate);
            }
            
            if (endDate) {
                params.append('endDate', endDate);
            }
            
            const url = `/api/download?${params.toString()}`;
            
            try {
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error('Failed to download CSV');
                }
                
                const blob = await response.blob();
                const downloadUrl = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = downloadUrl;
                a.download = 'downtime_history.csv';
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(downloadUrl);
                a.remove();
                
            } catch (error) {
                console.error('Error downloading CSV:', error);
                alert('Failed to download CSV');
            }
        });
        
        // Modal close buttons
        document.querySelector('#historyModal .close').addEventListener('click', () => {
            historyModal.style.display = 'none';
        });
        
        document.getElementById('confirmDelete').addEventListener('click', async () => {
            if (!deleteIpId) return;
            
            try {
                const response = await fetch(`/api/ip/${deleteIpId}`, {
                    method: 'DELETE'
                });
                
                if (!response.ok) {
                    throw new Error('Failed to delete IP');
                }
                
                // Close modal and refresh data
                deleteModal.style.display = 'none';
                deleteIpId = null;
                fetchIPs();
                fetchLocations();
                
            } catch (error) {
                console.error('Error deleting IP:', error);
                alert('Failed to delete IP');
            }
        });
        
        document.getElementById('cancelDelete').addEventListener('click', () => {
            deleteModal.style.display = 'none';
            deleteIpId = null;
        });
        
        // Close modals when clicking outside
        window.addEventListener('click', (event) => {
            if (event.target === historyModal) {
                historyModal.style.display = 'none';
            }
            if (event.target === deleteModal) {
                deleteModal.style.display = 'none';
                deleteIpId = null;
            }
        });
        
    // Download template
    document.getElementById('downloadTemplateBtn').addEventListener('click', async () => {
        try {
            const response = await fetch('/api/template');
            
            if (!response.ok) {
                throw new Error('Failed to download template');
            }
            
            const blob = await response.blob();
            const downloadUrl = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = downloadUrl;
            a.download = 'ip_template.csv';
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(downloadUrl);
            a.remove();
            
        } catch (error) {
            console.error('Error downloading template:', error);
            alert('Failed to download template');
        }
    });
    
    // Upload CSV
    document.getElementById('uploadBtn').addEventListener('click', async () => {
        const fileInput = document.getElementById('csvFile');
        const resultDiv = document.getElementById('uploadResult');
        const resultTitle = document.getElementById('uploadResultTitle');
        const resultMessage = document.getElementById('uploadResultMessage');
        const errorList = document.getElementById('uploadErrorList');
        
        if (!fileInput.files || fileInput.files.length === 0) {
            alert('Please select a CSV file to upload');
            return;
        }
        
        const formData = new FormData();
        formData.append('file', fileInput.files[0]);
        
        try {
            const response = await fetch('/api/upload', {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            
            if (response.ok) {
                // Success
                resultDiv.className = 'alert-success';
                resultTitle.textContent = 'Upload Successful';
                resultMessage.textContent = `Added ${result.added} IP address(es) successfully.`;
                
                // Show errors if any
                if (result.errors && result.errors.length > 0) {
                    errorList.innerHTML = '<h4>Some entries could not be added:</h4><ul>';
                    result.errors.forEach(error => {
                        errorList.innerHTML += `<li>${error}</li>`;
                    });
                    errorList.innerHTML += '</ul>';
                    errorList.style.display = 'block';
                } else {
                    errorList.style.display = 'none';
                }
                
                // Clear the file input
                fileInput.value = '';
                
                // Refresh data
                fetchIPs();
                fetchLocations();
            } else {
                // Error
                resultDiv.className = 'alert-danger';
                resultTitle.textContent = 'Upload Failed';
                resultMessage.textContent = result.error || 'An error occurred during upload';
                errorList.style.display = 'none';
            }
            
            resultDiv.style.display = 'block';
            
        } catch (error) {
            console.error('Error uploading file:', error);
            resultDiv.className = 'alert-danger';
            resultTitle.textContent = 'Upload Failed';
            resultMessage.textContent = 'An error occurred while uploading the file';
            errorList.style.display = 'none';
            resultDiv.style.display = 'block';
        }
    });
        // Auto-refresh data every 5 seconds
        setInterval(fetchIPs, 5000);
    </script>
</body>
</html>